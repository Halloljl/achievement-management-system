package org.hallo.ams.workbench.mapper;

import org.hallo.ams.workbench.domain.Academic;

import java.util.List;
import java.util.Map;

public interface AcademicMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_academic
     *
     * @mbg.generated Mon Apr 18 23:19:54 CST 2022
     */
    int deleteByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_academic
     *
     * @mbg.generated Mon Apr 18 23:19:54 CST 2022
     */
    int insert(Academic record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_academic
     *
     * @mbg.generated Mon Apr 18 23:19:54 CST 2022
     */
    int insertSelective(Academic record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_academic
     *
     * @mbg.generated Mon Apr 18 23:19:54 CST 2022
     */
    Academic selectByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_academic
     *
     * @mbg.generated Mon Apr 18 23:19:54 CST 2022
     */
    int updateByPrimaryKeySelective(Academic record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_academic
     *
     * @mbg.generated Mon Apr 18 23:19:54 CST 2022
     */
    int updateByPrimaryKey(Academic record);


    /**
     *  保存创建的专利
     * @param academic
     * @return
     */
    int insertAcademic(Academic academic);

    /**
     * 查看分页专利
     * @param map 查询条件
     * @return 分页的专利列表
     */
    List<Academic> selectAcademicByConditionForPage(Map<String,Object> map);

    /**
     * 根据条件查询记录的数量
     * @param map
     * @return
     */
    int selectCountOfAcademicByCondition(Map<String,Object> map);

    /**
     * 根据ids来批量删除专利
     * @param ids
     * @return
     */
    int deleteAcademicByIds(String[] ids);

    /**
     * 根据id查询专利的信息
     * @param id
     * @return
     */
    Academic selectAcademicById(String id);

    /**
     * 更新专利
     * @param academic
     * @return
     */
    int updateAcademic(Academic academic);


    /**
     * 查询所有的专利
     * @return
     */
    List<Academic> selectAllAcademics();

    /**
     * 根据ids查找专利列表
     * @param ids
     * @return
     */
    List<Academic> selectAcademicsByIds(String[] ids);

    /**
     *  批量保存专利
     * @return
     */
    int insertAcademicsByList(List<Academic> academicList);

    /**
     * 根据专利id查询专利的详细详细
     * @param id
     * @return
     */
    Academic selectAcademicForDetailById(String id);
}